{"ast":null,"code":"import { regEmail, regName, regPassword } from \"./Constants\";\nexport const validate = values => {\n  let errors = {\n    firstName: '',\n    lastName: '',\n    email: '',\n    password: ''\n  };\n  if (!values.firstName.trim().length) {\n    errors.firstName = 'Required';\n  } else if (!values.firstName.match(regName)) {\n    errors.firstName = 'Invalid first name';\n  }\n  ;\n  if (!values.lastName.trim().length) {\n    errors.lastName = 'Required';\n  } else if (!values.lastName.match(regName)) {\n    errors.lastName = 'Invalid last name';\n  }\n  ;\n  if (!values.email.trim().length) {\n    errors.email = 'Required';\n  } else if (!values.email.match(regEmail)) {\n    errors.email = 'Invalid email format';\n  }\n  ;\n  if (!values.password.trim().length) {\n    errors.password = 'Required';\n  } else if (!values.password.match(regPassword)) {\n    errors.password = '6-12 symbols incl. number and special';\n  }\n  ;\n  return errors;\n};","map":{"version":3,"names":["regEmail","regName","regPassword","validate","values","errors","firstName","lastName","email","password","trim","length","match"],"sources":["C:/Users/Kosntantin/Documents/mate/wine-store/src/utils/Helper.tsx"],"sourcesContent":["import { FormikValues } from \"../types/FormikValues\";\nimport { regEmail, regName, regPassword } from \"./Constants\";\n\nexport const validate = (values: FormikValues) => {\n  \n    let errors: FormikValues = {\n        firstName: '',\n        lastName: '',\n        email: '',\n        password: '',\n    };\n\n    if (!values.firstName.trim().length) {\n        errors.firstName = 'Required'\n    } else if (!values.firstName.match(regName)) {\n        errors.firstName = 'Invalid first name'\n    };\n\n    if (!values.lastName.trim().length) {\n        errors.lastName = 'Required'\n    } else if (!values.lastName.match(regName)) {\n        errors.lastName = 'Invalid last name'\n    };\n\n    if (!values.email.trim().length) {\n        errors.email = 'Required'\n    } else if (!values.email.match(regEmail)) {\n        errors.email = 'Invalid email format'\n    };\n\n    if (!values.password.trim().length) {\n        errors.password = 'Required'\n    } else if (!values.password.match(regPassword)) {\n        errors.password = '6-12 symbols incl. number and special'\n    };\n\n    return errors\n}"],"mappings":"AACA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,WAAW,QAAQ,aAAa;AAE5D,OAAO,MAAMC,QAAQ,GAAIC,MAAoB,IAAK;EAE9C,IAAIC,MAAoB,GAAG;IACvBC,SAAS,EAAE,EAAE;IACbC,QAAQ,EAAE,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,QAAQ,EAAE;EACd,CAAC;EAED,IAAI,CAACL,MAAM,CAACE,SAAS,CAACI,IAAI,EAAE,CAACC,MAAM,EAAE;IACjCN,MAAM,CAACC,SAAS,GAAG,UAAU;EACjC,CAAC,MAAM,IAAI,CAACF,MAAM,CAACE,SAAS,CAACM,KAAK,CAACX,OAAO,CAAC,EAAE;IACzCI,MAAM,CAACC,SAAS,GAAG,oBAAoB;EAC3C;EAAC;EAED,IAAI,CAACF,MAAM,CAACG,QAAQ,CAACG,IAAI,EAAE,CAACC,MAAM,EAAE;IAChCN,MAAM,CAACE,QAAQ,GAAG,UAAU;EAChC,CAAC,MAAM,IAAI,CAACH,MAAM,CAACG,QAAQ,CAACK,KAAK,CAACX,OAAO,CAAC,EAAE;IACxCI,MAAM,CAACE,QAAQ,GAAG,mBAAmB;EACzC;EAAC;EAED,IAAI,CAACH,MAAM,CAACI,KAAK,CAACE,IAAI,EAAE,CAACC,MAAM,EAAE;IAC7BN,MAAM,CAACG,KAAK,GAAG,UAAU;EAC7B,CAAC,MAAM,IAAI,CAACJ,MAAM,CAACI,KAAK,CAACI,KAAK,CAACZ,QAAQ,CAAC,EAAE;IACtCK,MAAM,CAACG,KAAK,GAAG,sBAAsB;EACzC;EAAC;EAED,IAAI,CAACJ,MAAM,CAACK,QAAQ,CAACC,IAAI,EAAE,CAACC,MAAM,EAAE;IAChCN,MAAM,CAACI,QAAQ,GAAG,UAAU;EAChC,CAAC,MAAM,IAAI,CAACL,MAAM,CAACK,QAAQ,CAACG,KAAK,CAACV,WAAW,CAAC,EAAE;IAC5CG,MAAM,CAACI,QAAQ,GAAG,uCAAuC;EAC7D;EAAC;EAED,OAAOJ,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}