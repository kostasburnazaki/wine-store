{"ast":null,"code":"import { regEmail, regName, regPassword } from \"./Constants\";\nexport const validate = values => {\n  let errors = {};\n  if (!values.firstName.trim().length) {\n    errors.firstName = 'Required';\n  } else if (!values.firstName.match(regName)) {\n    errors.firstName = 'Invalid first name';\n  }\n  ;\n  if (!values.lastName.trim().length) {\n    errors.lastName = 'Required';\n  } else if (!values.lastName.match(regName)) {\n    errors.lastName = 'Invalid last name';\n  }\n  ;\n  if (!values.email.trim().length) {\n    errors.email = 'Required';\n  } else if (!values.email.match(regEmail)) {\n    errors.email = 'Invalid email format';\n  }\n  ;\n  if (!values.password.trim().length) {\n    errors.password = 'Required';\n  } else if (!values.password.match(regPassword)) {\n    errors.password = '6-12 symbols incl. number and special';\n  }\n  ;\n  return errors;\n};","map":{"version":3,"names":["regEmail","regName","regPassword","validate","values","errors","firstName","trim","length","match","lastName","email","password"],"sources":["C:/Users/Kosntantin/Documents/mate/wine-store/src/utils/Helper.tsx"],"sourcesContent":["import { FormikValues } from \"../types/FormikTypes\";\nimport { regEmail, regName, regPassword } from \"./Constants\";\n\nexport const validate = (values: FormikValues) => {\n    let errors: FormikErr = {};\n\n    if (!values.firstName.trim().length) {\n        errors.firstName = 'Required';\n    } else if (!values.firstName.match(regName)) {\n        errors.firstName = 'Invalid first name';\n    };\n\n    if (!values.lastName.trim().length) {\n        errors.lastName = 'Required'\n    } else if (!values.lastName.match(regName)) {\n        errors.lastName = 'Invalid last name'\n    };\n\n    if (!values.email.trim().length) {\n        errors.email = 'Required'\n    } else if (!values.email.match(regEmail)) {\n        errors.email = 'Invalid email format'\n    };\n\n    if (!values.password.trim().length) {\n        errors.password = 'Required'\n    } else if (!values.password.match(regPassword)) {\n        errors.password = '6-12 symbols incl. number and special'\n    };\n\n    return errors\n}"],"mappings":"AACA,SAASA,QAAQ,EAAEC,OAAO,EAAEC,WAAW,QAAQ,aAAa;AAE5D,OAAO,MAAMC,QAAQ,GAAIC,MAAoB,IAAK;EAC9C,IAAIC,MAAiB,GAAG,CAAC,CAAC;EAE1B,IAAI,CAACD,MAAM,CAACE,SAAS,CAACC,IAAI,EAAE,CAACC,MAAM,EAAE;IACjCH,MAAM,CAACC,SAAS,GAAG,UAAU;EACjC,CAAC,MAAM,IAAI,CAACF,MAAM,CAACE,SAAS,CAACG,KAAK,CAACR,OAAO,CAAC,EAAE;IACzCI,MAAM,CAACC,SAAS,GAAG,oBAAoB;EAC3C;EAAC;EAED,IAAI,CAACF,MAAM,CAACM,QAAQ,CAACH,IAAI,EAAE,CAACC,MAAM,EAAE;IAChCH,MAAM,CAACK,QAAQ,GAAG,UAAU;EAChC,CAAC,MAAM,IAAI,CAACN,MAAM,CAACM,QAAQ,CAACD,KAAK,CAACR,OAAO,CAAC,EAAE;IACxCI,MAAM,CAACK,QAAQ,GAAG,mBAAmB;EACzC;EAAC;EAED,IAAI,CAACN,MAAM,CAACO,KAAK,CAACJ,IAAI,EAAE,CAACC,MAAM,EAAE;IAC7BH,MAAM,CAACM,KAAK,GAAG,UAAU;EAC7B,CAAC,MAAM,IAAI,CAACP,MAAM,CAACO,KAAK,CAACF,KAAK,CAACT,QAAQ,CAAC,EAAE;IACtCK,MAAM,CAACM,KAAK,GAAG,sBAAsB;EACzC;EAAC;EAED,IAAI,CAACP,MAAM,CAACQ,QAAQ,CAACL,IAAI,EAAE,CAACC,MAAM,EAAE;IAChCH,MAAM,CAACO,QAAQ,GAAG,UAAU;EAChC,CAAC,MAAM,IAAI,CAACR,MAAM,CAACQ,QAAQ,CAACH,KAAK,CAACP,WAAW,CAAC,EAAE;IAC5CG,MAAM,CAACO,QAAQ,GAAG,uCAAuC;EAC7D;EAAC;EAED,OAAOP,MAAM;AACjB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}